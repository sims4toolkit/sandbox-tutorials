{"key":"get-to-know-sandbox","pages":[{"script":"Sandbox.output(\"Welcome to the S4TK Sandbox!\");\n\n// run the script, then change 'false' to 'true' and try again\nSandbox.test(\"Should be true\", false);\n","guide":"<h2>User Interface</h2>\n<p>\n  Welcome to the S4TK Sandbox. This website is intended to make S4TK more\n  accessible by removing the need to set up your own Node environment.\n</p>\n<p>\n  In order to get the best out of this website, you should understand how it\n  works. That's what this tutorial is here for.\n</p>\n\n<h4>Main Editor vs. Tutorials</h4>\n<p>\n  There are two primary features of this website. The first is where you are\n  now, in an interactive tutorial. The second is the main code editor, in which\n  you have access to a file system and can write, save, and run any scripts you\n  want.\n</p>\n<p>\n  To access the main code editor (once you're done with this tutorial), click\n  the <img src=\"./assets/terminal-outline.svg\" class=\"inline-svg\" /> button in\n  the navbar. To come back to tutorials, click\n  <img src=\"./assets/book-outline.svg\" class=\"inline-svg\" />.\n</p>\n<p>\n  For now, don't worry about the main code editor and file system - they'll be\n  mentioned as needed throughout this tutorial, and you'll be prepared to use\n  them by the end.\n</p>\n\n<h4>Tutorial Guide</h4>\n<p>\n  The tutorial guide is what you are reading right now. It is only available in\n  tutorial mode, and is replaced with a file manager in the main editor. You can\n  resize this window by dragging the edge between it and the script editor.\n</p>\n<p>\n  Some tutorials, such as this one, consist of multiple pages. You go back and\n  forth, you can use the Back (<img\n    src=\"./assets/chevron-left.svg\"\n    class=\"inline-svg\"\n  />) and Next (<img src=\"./assets/chevron-right.svg\" class=\"inline-svg\" />)\n  buttons at the bottom of the tutorial guide.\n</p>\n\n<h4>The Script Editor</h4>\n<p>\n  The script editor is the window to the right of this one. You can type,\n  copy/paste, undo/redo, and even find/replace using your computer's standard\n  keyboard shortcuts.\n</p>\n<p>\n  You can edit the content to whatever you want, but you cannot save these edits\n  while in tutorial mode - if you leave/refresh this page, the editor content\n  will reset.\n</p>\n<p>\n  When using the main editor/file system, you <em>can</em> save your changes,\n  and they will be here waiting for you if you leave the site and come back. In\n  fact, you can save as many scripts as you'd like - that's what the file system\n  is for.\n</p>\n\n<h4>The Console</h4>\n<p>\n  The console is the window below the editor. You can resize it by dragging the\n  edge between it and the script editor.\n</p>\n<p>\n  Its purpose is to show the output generated by your script. Errors will\n  automatically be logged in the console, but there are ways you can write to it\n  yourself.\n</p>\n<p>\n  <code>Sandbox.output(...args: string[])</code> will write the arguments it is\n  given separated by newlines.\n  <code>Sandbox.test(name: string, condition: boolean)</code> will check the\n  value of the condition and print out a pass/fail message accordingly.\n</p>\n\n<h4>The Toolbar</h4>\n<p>\n  The toolbar is the set of buttons in the bottom-right of your screen. In\n  tutorial mode, these buttons include:\n</p>\n<p>\n  Download (<img src=\"./assets/download.svg\" class=\"inline-svg\" />) will\n  download the contents of the editor as a JavaScript (.js) file.\n</p>\n<p>\n  Reset (<img src=\"./assets/refresh.svg\" class=\"inline-svg\" />) will reset the\n  contents of the editor to how they were at the start of the tutorial.\n</p>\n<p>\n  Run (<img src=\"./assets/play.svg\" class=\"inline-svg\" />) will run the contents\n  of the editor as a script and write its output to the console.\n</p>\n"},{"script":"// import media files with `await Sandbox.import(filename)`\nconst stblBuffer = await Sandbox.import(\"Sample.stbl\");\nSandbox.output(`The binary STBL data is: ${stblBuffer.toString(\"base64\")}`);\n\n// if you import a file that doesn't exist, you'll see an error\ntry {\n  await Sandbox.import(\"shouldNotExist\");\n} catch (err) {\n  Sandbox.output(\"Caught the error!\");\n}\n\n// download files with `Sandbox.download(filename, content)`\nSandbox.download(\"MyStbl.stbl\", stblBuffer);\n\n// the content doesn't have to be a buffer, it can be a string, too\nSandbox.download(\"MyText.txt\", \"Look, mom - I'm being downloaded!\");\n","guide":"<h2>Sandbox Functions</h2>\n<p>\n  The sandbox has several built-in functions, such as <code>output()</code> and\n  <code>test()</code> which were mentioned on the previous page. This page will\n  teach you about the other sandbox functions.\n</p>\n\n<h4>The File System</h4>\n<p>\n  In the file system, there are two types of files: scripts and media. Scripts\n  are the JavaScript files that you write & run, and media files can contain any\n  data you want, such as JSON, string tables, or packages. Scripts can import\n  media files and use them however they please.\n</p>\n<p>\n  Tutorials do not have access to the main sandbox's file system, but some of\n  them provide files of their own. This tutorial provides a media file called\n  \"Sample.stbl\", which is a string table containing one entry.\n</p>\n\n<h4>Importing Media Files</h4>\n<p>\n  You can import media files with <code>Sandbox.import(filename: string)</code>,\n  which is an <strong>async</strong> function that returns a Buffer. The scripts\n  you write are executed in the context of an async function, which means you\n  are allowed to use top-level <code>await</code>.\n</p>\n<p>\n  If that last paragraph went over your head, don't worry about it - just look\n  at how the <code>import()</code> function is used in the sample script and use\n  it like that. Note that using <code>await</code> is\n  <strong>very</strong> important - if you forget it, the import function will\n  not return the value you're expecting it to.\n</p>\n\n<h4>Downloading Files</h4>\n<p>\n  You can download anything you want using the\n  <code>Sandbox.download(filename: string, content: string | Buffer)</code>\n  function.\n</p>\n<p>\n  The <code>download()</code> function will not download your file immediately,\n  but rather it will queue it to be downloaded when the script is done. If only\n  one file is queued, it will download as-is. If multiple files are queued, they\n  will be zipped and then downloaded as one. This means that you can use\n  <code>download()</code> multiple times, or even in a loop, and you don't have\n  to worry about it cluttering your downloads folder.\n</p>\n<p>\n  After running this script, a file called\n  \"Get_to_Know_the_Sandbox.downloads.zip\" should automatically download, and it\n  should contain two files: \"MyStbl.stbl\" and \"MyText.txt\".\n</p>\n"},{"script":"// you can import S4TK modules with `require()`\nconst { StringTableResource } = require(\"@s4tk/models\");\nconst { formatStringKey } = require(\"@s4tk/hashing/formatting\");\n\n// import the STBL data, as you saw on the last page\nconst buffer = await Sandbox.import(\"Sample.stbl\");\n\n// now that you've imported StringTableResource, you can parse the buffer\nconst stbl = StringTableResource.from(buffer);\n\n// this line gets the first entry in the string table\nconst entry = stbl.entries[0];\n\n// see what the key/value of the entry are!\nSandbox.output(`Key: ${formatStringKey(entry.key)}`, `Value: ${entry.value}`);\n","guide":"<h2>Node Parity</h2>\n<p>\n  Although the sandbox uses browser JavaScript, it is intended to mock a Node\n  environment. As such, the sandbox provides implementations for some Node\n  features, such as <code>require()</code> and <code>Buffer</code>.\n</p>\n\n<h4>Importing S4TK Modules</h4>\n<p>\n  You can import S4TK modules exactly as you would in Node, using\n  <code>require()</code>. Imports in this sandbox are at full parity with the\n  S4TK Node library, so you can copy your code directly into Node and it should\n  \"just work\" (minus the <code>Sandbox</code> functions).\n</p>\n<p>\n  However, since this is a browser, you do NOT have access to any Node modules\n  other than S4TK. This includes <code>fs</code>, the Node file system. When\n  converting S4TK scripts from the sandbox to Node, you'll have to replace\n  <code>import()</code> with <code>readFileSync()</code> and\n  <code>download()</code> with <code>writeFileSync()</code>.\n</p>\n\n<h4>Buffers</h4>\n<p>\n  Buffers are very important in S4TK, as they are used to read and write files.\n  The buffers returned from <code>import()</code> and resources'\n  <code>getBuffer()</code> methods are at full parity with buffers in Node.\n</p>\n<p>\n  In fact, if you need to use the <code>Buffer</code> class (you probably don't,\n  but in case you do), you can use it just as you would in Node - no import\n  required.\n</p>\n\n<h4>Note</h4>\n<p>\n  If you see code in this script that you don't understand, such as\n  <code>StringTableResource</code> and <code>formatStringKey()</code>, don't\n  worry about it. These are explained in other tutorials.\n</p>\n"},{"script":"// this will log an error, because you cannot use `runScript` in tutorials\nconst value = await Sandbox.runScript(\"someOtherScript\");\n\n// even though this does nothing during a tutorial, this is how you would\n// return a value from a script, so that another script can call this one\n// and use its output\nreturn \"Something!\";\n","guide":"<h2>Writing & Running Scripts</h2>\n<p>\n  Now that you're familiar with the sandbox interface, functions, and Node\n  compatibility, you're almost ready to get started with the main editor and\n  file system.\n</p>\n<p>\n  But, before you go clicking that\n  <img src=\"./assets/terminal-outline.svg\" class=\"inline-svg\" /> button, here\n  are a couple of final notes.\n</p>\n\n<h4>Running Scripts in Scripts</h4>\n<p>\n  The scripts you have saved in your file system are allowed to call each other\n  by name, and can even pass values to one another. Since each individual script\n  is wrapped in an asynchronous function, you can use the\n  <code>return</code> keyword in one script, and <code>await</code> when calling\n  it in another.\n</p>\n<p>\n  Tutorials do NOT have access to the file system, and therefore cannot run\n  other scripts. If you run the script for this page, you'll see an error.\n</p>\n<p>\n  To call a script from another script, use\n  <code>Sandbox.runScript(filename: string)</code>. Like <code>import()</code>,\n  this is an async function, so you <strong>must</strong> use the\n  <code>await</code> keyword in order to get its value.\n</p>\n\n<h4>You're Done!</h4>\n<p>\n  It's time to check out the main editor and file system - click\n  <img src=\"./assets/terminal-outline.svg\" class=\"inline-svg\" /> in the navbar\n  to get there.\n</p>\n<p>\n  Once in the main editor, you'll see an example script that demonstrates\n  everything you'd read about in this tutorial. The script \"helloWorld\" gets a\n  string table from the \"loadSampleSTBL\" script, which reads the\n  \"SampleSTBL.stbl\" media file into a <code>StringTableResource</code> object.\n</p>\n"}],"media":{"Sample.stbl":"U1RCTAUAAAEAAAAAAAAAAAAzAAAAIuZxQwAyAE5ldmVyIGdvbm5hIGdpdmUgeW91IHVwLCBuZXZlciBnb25uYSBsZXQgeW91IGRvd24u"}}