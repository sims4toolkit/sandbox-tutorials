{"key":"get-to-know-sandbox","pages":[{"script":"Sandbox.output(\"Welcome to the S4TK Sandbox!\");\n\n// run the script, then change 'false' to 'true' and try again\nSandbox.test(\"Should be true\", false);\n","guide":"<p>\n  Welcome to the S4TK Sandbox. This website is intended to make S4TK more\n  accessible by removing the need to set up your own Node environment.\n</p>\n<p>\n  In order to get the best out of this website, you should understand how it\n  works. That's what this tutorial is here for.\n</p>\n\n<h4>Main Editor vs. Tutorials</h4>\n<p>\n  There are two primary features of this website. The first is where you are\n  now, in an interactive tutorial. The second is the main code editor, in which\n  you have access to a file system and can write, save, and run any scripts you\n  want.\n</p>\n<p>\n  To access the main code editor (once you're done with this tutorial), click\n  the <img src=\"./assets/terminal-outline.svg\" class=\"inline-svg\" /> button in\n  the navbar. To come back to tutorials, click\n  <img src=\"./assets/book-outline.svg\" class=\"inline-svg\" />.\n</p>\n<p>\n  For now, don't worry about the main code editor and file system - they'll be\n  mentioned as needed throughout this tutorial, and you'll be prepared to use\n  them by the end.\n</p>\n\n<h4>Tutorial Guide</h4>\n<p>\n  The tutorial guide is what you are reading right now. It is only available in\n  tutorial mode, and is replaced with a file manager in the main editor. You can\n  resize this window by dragging the edge between it and the script editor.\n</p>\n<p>\n  Some tutorials, such as this one, consist of multiple pages. You go back and\n  forth, you can use the Back (<img\n    src=\"./assets/chevron-left.svg\"\n    class=\"inline-svg\"\n  />) and Next (<img src=\"./assets/chevron-right.svg\" class=\"inline-svg\" />)\n  buttons at the bottom of the tutorial guide.\n</p>\n\n<h4>The Script Editor</h4>\n<p>\n  The script editor is the window to the right of this one. You can type,\n  copy/paste, undo/redo, and even find/replace using your computer's standard\n  keyboard shortcuts.\n</p>\n<p>\n  You can edit the content to whatever you want, but you cannot save these edits\n  while in tutorial mode - if you leave/refresh this page, the editor content\n  will reset.\n</p>\n<p>\n  When using the main editor/file system, you <em>can</em> save your changes,\n  and they will be here waiting for you if you leave the site and come back. In\n  fact, you can save as many scripts as you'd like - that's what the file system\n  is for.\n</p>\n\n<h4>The Console</h4>\n<p>\n  The console is the window below the editor. You can resize it by dragging the\n  edge between it and the script editor.\n</p>\n<p>\n  Its purpose is to show the output generated by your script. Errors will\n  automatically be logged in the console, but there are ways you can write to it\n  yourself.\n</p>\n<p>\n  <code>Sandbox.output(...args: string[])</code> will write the arguments it is\n  given separated by newlines.\n  <code>Sandbox.test(name: string, condition: boolean)</code> will check the\n  value of the condition and print out a pass/fail message accordingly.\n</p>\n\n<h4>The Toolbar</h4>\n<p>\n  The toolbar is the set of buttons in the bottom-right of your screen. In\n  tutorial mode, these buttons include:\n</p>\n<p>\n  Download (<img src=\"./assets/download.svg\" class=\"inline-svg\" />) will\n  download the contents of the editor as a JavaScript (.js) file.\n</p>\n<p>\n  Reset (<img src=\"./assets/refresh.svg\" class=\"inline-svg\" />) will reset the\n  contents of the editor to how they were at the start of the tutorial.\n</p>\n<p>\n  Run (<img src=\"./assets/play.svg\" class=\"inline-svg\" />) will run the contents\n  of the editor as a script and write its output to the console.\n</p>\n"},{"script":"Sandbox.output(\"This outputs one line\");\n\nSandbox.output(\"And\", \"this\", \"outputs\", \"four\");\n\n// run the script, then set this to true and run it again\nconst somethingToTest = false;\n\nSandbox.test(\"Variable should be true\", somethingToTest);\n","guide":""},{"script":"const { Package } = require(\"@s4tk/models\");\nconst { TuningResourceType } = require(\"@s4tk/models/enums\");\nconst { fnv64 } = require(\"@s4tk/hashing\");\n\nconst pkg = new Package();\n\nBuffer.from(\"This is going to be a file.\");\n\npkg.add(\n  {\n    type: TuningResourceType.Tuning,\n    group: 0,\n    instance: fnv64(\"something\"),\n  }\n  // TODO:\n);\n","guide":"<h2>Node Parity</h2>\n<p>Although this sandbox uses JavaScript in your browser, it is intended to teach you JavaScript that can run in Node. To make the conversion to Node easier, the sandbox provides implementations for some Node features, such as <code>require</code> and <code>Buffer</code>.</p>\n<h4>Buffers</h4>\n<p>Buffers are very important in S4TK, so they had to be included as a first class citizen in the sandbox. You can use buffers here just as you would in Node - no imports are required.</p>\n<p>If you </p>\n<h4>Require Imports</h4>\n<p>You can import S4TK modules exactly as you would in Node, using <code>require</code>. The <code>require</code> function provided by this sandbox is at full parity with the S4TK Node library, so you can copy your code directly into Node and it should just work (minus the <code>Sandbox</code> functions).</p>\n<p>However, since this is a browser, you do NOT have access to any Node modules other than S4TK. This includes <code>fs</code>, the Node file system.</p>\n<h4>The File System</h4>\n<p>Since working with files is a very important part of S4TK, the sandbox has its own file system for you to use. It involves uploading files as media so that they can be imported, and downloading files to save them.</p>\n<p>While in a tutorial, you do not have access to your sandbox filesystem. Instead, you are able to access media files that are a part of the tutorial itself.</p>\n<p>This tutorial includes a media file called \"Sample.stbl\".</p>"}],"media":{}}