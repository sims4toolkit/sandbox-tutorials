{"key":"string-tables","pages":[{"script":"const { StringTableResource } = require(\"@s4tk/models\");\n\n// ==================================================\n// Creating a String Table\n\n// create a new, empty string table\nconst stbl = new StringTableResource();\n\n// ==================================================\n// Adding New Strings\n\n// add the string \"First\", with key = FNV32 hash of \"First\"\nstbl.addAndHash(\"First\");\n\n// add the string \"Second\", with key = FNV32 hash of \"creatorName:string_Second\"\nstbl.addAndHash(\"Second\", \"creatorName:string_Second\");\n\n// add the string \"Third\", with key = 0x12345678\nstbl.add(0x12345678, \"Third\");\n\n// ==================================================\n// Getting Strings\n\n// get a string by its key\nconst first = stbl.getByKey(0x3b83da79); // first entry\nSandbox.output(`First value: \"${first.value}\"`);\n\n// get a string by its value\nconst second = stbl.getByValue(\"Second\"); // second entry\nSandbox.output(`Second value: \"${second.value}\"`);\n\n// get a string by its index (remember, indices start at 0!)\nconst third = stbl.entries[2]; // third entry\nSandbox.output(`Third value: \"${third.value}\"`);\n\n// ==================================================\n// Editing Strings\n\nSandbox.output(`Before edit: ${first.key} = \"${first.value}\"`);\n\n// edit the first string's key\nfirst.key = 12345;\n\n// edit the first string's value\nfirst.value = \"New first!\";\n\nSandbox.output(`After edit: ${first.key} = \"${first.value}\"`);\n\n// ==================================================\n// Deleting Strings\n\nSandbox.output(`Size before deleting: ${stbl.size}`);\n\n// delete the first entry by its key\nstbl.deleteByKey(12345);\n\n// find an entry by its value, then delete by its ID\nconst toDelete = stbl.getByValue(\"Second\");\nstbl.delete(toDelete.id);\n\nSandbox.output(`Size after deleting: ${stbl.size}`);\n","guide":"<h2>StringTableResource</h2>\n<p>\n  When dealing with string tables, you'll need to use the\n  <code>StringTableResource</code> class from @s4tk/models.\n</p>\n\n<h4>Creating STBL</h4>\n<p>\n  To create a new, empty string table, you can use\n  <code>new StringTableResource()</code>.\n</p>\n\n<h4>Adding Strings</h4>\n<p>\n  The <code>addAndHash(string)</code> method will add the given string to the\n  table, and use its 32-bit hash as its key. While convenient, it may not be the\n  best idea to use this function in production - you want to make sure that your\n  string keys are unique.\n</p>\n<p>\n  The <code>addAndHash(string, toHash)</code> method will add the given string\n  to the table, and use the 32-bit hash of the <code>toHash</code> argument as\n  its key. This is a bit \"safer\" than hashing the string itself, because you can\n  append your creator name to the front, increasing the liklihood that your key\n  will be unique.\n</p>\n<p>\n  Finally, the <code>add(key, string)</code> method will add the given string to\n  the table with the given key. You can put in a fixed value for the key, or you\n  can use the <code>fnv32()</code> function from @s4tk/hashing to generate a\n  hash manually.\n</p>\n\n<h4>Getting Strings</h4>\n<p>\n  You can get a string entry by its key with the\n  <code>getByKey(key)</code> method, or by its value with the\n  <code>getByValue(value)</code> method. Note that the value must be an exact\n  match, case sensitive, in order to return the entry. The entry that is\n  returned is an object with <code>key</code> and <code>value</code> properties.\n</p>\n<p>\n  Additionally, you can use the <code>entries</code> property, which is a list\n  of all of the entries in the string table. You can use this list to get\n  entries by their index, or to loop/iterate over all of the entries. Note that\n  adding/removing entries to/from this list will NOT add/remove them from the\n  string table - you MUST use the add/delete methods.\n</p>\n\n<h4>Editing Strings</h4>\n<p>\n  Once you get a reference to an entry, editing it is as easy as setting the\n  <code>key</code> and <code>value</code> properties.\n</p>\n\n<h4>Deleting Strings</h4>\n<p>\n  To delete an entry with a known key, you can use the\n  <code>deleteByKey(key)</code> method. If you don't know the key, though, you\n  can fetch the entry you want to delete (by its value or index), and then\n  delete it by its unique ID with <code>delete(id)</code>.\n</p>\n<p>\n  If you're confused what the difference between a <code>key</code> and an\n  <code>id</code> is, it's quite simple. Keys are what the game uses, they\n  identify which <em>strings</em> are which. IDs are what S4TK uses, they\n  identify which <em>entries</em> are which. IDs are not a part of the string\n  table, they are just used by S4TK to ensure uniqueness, since keys are NOT\n  guaranteed to be unique (they should be, but it is technically valid for them\n  to overlap).\n</p>\n"},{"script":"// TODO: load from binary\n\n// TODO: write to binary\n","guide":"<h2>String Table Binaries</h2>\n<p>TODO</p>"},{"script":"// TODO: load from JSON\n\n// TODO: write to JSON\n","guide":"<h2>String Table JSONs</h2>\n<p>TODO</p>"}],"media":{"Sample.stbl":"U1RCTAUAAAEAAAAAAAAAAAAzAAAAIuZxQwAyAE5ldmVyIGdvbm5hIGdpdmUgeW91IHVwLCBuZXZlciBnb25uYSBsZXQgeW91IGRvd24u","SampleStblData.json":"WwogIHsKICAgICJrZXkiOiAzMDU0MTk4OTYsCiAgICAidmFsdWUiOiAiRmlyc3Qgc3RyaW5nIgogIH0sCiAgewogICAgImtleSI6IDIyNzE1NjA0ODEsCiAgICAidmFsdWUiOiAiU2Vjb25kIHN0cmluZyIKICB9Cl0="}}