{"key":"string-tables","pages":[{"script":"const { StringTableResource } = require(\"@s4tk/models\");\n\n// ==================================================\n// Creating a String Table\n\n// create a new, empty string table\nconst stbl = new StringTableResource();\n\n// ==================================================\n// Adding New Strings\n\n// add the string \"First\", with key = FNV32 hash of \"First\"\nstbl.addAndHash(\"First\");\n\n// add the string \"Second\", with key = FNV32 hash of \"creatorName:string_Second\"\nstbl.addAndHash(\"Second\", \"creatorName:string_Second\");\n\n// add the string \"Third\", with key = 0x12345678\nstbl.add(0x12345678, \"Third\");\n\n// ==================================================\n// Getting Strings\n\n// get a string by its key\nconst first = stbl.getByKey(0x3b83da79); // first entry\nSandbox.output(`First value: \"${first.value}\"`);\n\n// get a string by its value\nconst second = stbl.getByValue(\"Second\"); // second entry\nSandbox.output(`Second value: \"${second.value}\"`);\n\n// get a string by its index (remember, indices start at 0!)\nconst third = stbl.entries[2]; // third entry\nSandbox.output(`Third value: \"${third.value}\"`);\n\n// ==================================================\n// Editing Strings\n\nSandbox.output(`Before edit: ${first.key} = \"${first.value}\"`);\n\n// edit the first string's key\nfirst.key = 12345;\n\n// edit the first string's value\nfirst.value = \"New first!\";\n\nSandbox.output(`After edit: ${first.key} = \"${first.value}\"`);\n\n// ==================================================\n// Deleting Strings\n\nSandbox.output(`Size before deleting: ${stbl.size}`);\n\n// delete the first entry by its key\nstbl.deleteByKey(12345);\n\n// find an entry by its value, then delete by its ID\nconst toDelete = stbl.getByValue(\"Second\");\nstbl.delete(toDelete.id);\n\nSandbox.output(`Size after deleting: ${stbl.size}`);\n","guide":"<h2>StringTableResource</h2>\n<p>\n  When dealing with string tables, you'll need to use the\n  <code>StringTableResource</code> class from @s4tk/models.\n</p>\n\n<h4>Creating STBL</h4>\n<p>\n  To create a new, empty string table, you can use\n  <code>new StringTableResource()</code>.\n</p>\n\n<h4>Adding Strings</h4>\n<p>\n  The <code>addAndHash(string)</code> method will add the given string to the\n  table, and use its 32-bit hash as its key. While convenient, it may not be the\n  best idea to use this function in production - you want to make sure that your\n  string keys are unique.\n</p>\n<p>\n  The <code>addAndHash(string, toHash)</code> method will add the given string\n  to the table, and use the 32-bit hash of the <code>toHash</code> argument as\n  its key. This is a bit \"safer\" than hashing the string itself, because you can\n  append your creator name to the front, increasing the liklihood that your key\n  will be unique.\n</p>\n<p>\n  Finally, the <code>add(key, string)</code> method will add the given string to\n  the table with the given key. You can put in a fixed value for the key, or you\n  can use the <code>fnv32()</code> function from @s4tk/hashing to generate a\n  hash manually.\n</p>\n\n<h4>Getting Strings</h4>\n<p>\n  You can get a string entry by its key with the\n  <code>getByKey(key)</code> method, or by its value with the\n  <code>getByValue(value)</code> method. Note that the value must be an exact\n  match, case sensitive, in order to return the entry. The entry that is\n  returned is an object with <code>key</code> and <code>value</code> properties.\n</p>\n<p>\n  Additionally, you can use the <code>entries</code> property, which is a list\n  of all of the entries in the string table. You can use this list to get\n  entries by their index, or to loop/iterate over all of the entries. Note that\n  adding/removing entries to/from this list will NOT add/remove them from the\n  string table - you MUST use the add/delete methods.\n</p>\n\n<h4>Editing Strings</h4>\n<p>\n  Once you get a reference to an entry, editing it is as easy as setting the\n  <code>key</code> and <code>value</code> properties.\n</p>\n\n<h4>Deleting Strings</h4>\n<p>\n  To delete an entry with a known key, you can use the\n  <code>deleteByKey(key)</code> method. If you don't know the key, though, you\n  can fetch the entry you want to delete (by its value or index), and then\n  delete it by its unique ID with <code>delete(id)</code>.\n</p>\n<p>\n  If you're confused what the difference between a <code>key</code> and an\n  <code>id</code> is, it's quite simple. Keys are what the game uses, they\n  identify which <em>strings</em> are which. IDs are what S4TK uses, they\n  identify which <em>entries</em> are which. IDs are not a part of the string\n  table, they are just used by S4TK to ensure uniqueness, since keys are NOT\n  guaranteed to be unique (they should be, but it is technically valid for them\n  to overlap).\n</p>\n"},{"script":"const { StringTableResource } = require(\"@s4tk/models\");\n\n// ==================================================\n// Reading a String Table Binary\n\n// first, you need to get a buffer containing STBL data\n// in the sandbox, use `Sandbox.import(filename)`\nconst buffer = await Sandbox.import(\"Sample.stbl\");\n\n// then, you can use the static `StringTableResource.from()`\n// method to create a StringTableResource\nconst stbl = StringTableResource.from(buffer);\n\n// just to confirm that the stbl is loaded, check its value\nSandbox.output(`First value: ${stbl.entries[0].value}`);\n\n// ==================================================\n// Writing a String Table Binary\n\n// to get the buffer for a string table, use `getBuffer()`\nconst outputBuffer = stbl.getBuffer();\n\n// once you have the buffer, you can use `Sandbox.download()`\n// to save it to your computer\nSandbox.download(\"Sample.stbl\", outputBuffer);\n","guide":"<h2>String Table Binaries</h2>\n<p>\n  In order for the <code>StringTableResource</code> model to be useful at all,\n  you need to be able to load one from a STBL binary, as well as write it as\n  one. Fortunately, this is extremely easy.\n</p>\n\n<h4>Reading a STBL Binary</h4>\n<p>\n  Before you can create a <code>StringTableResource</code> object, you have to\n  get your hands on a buffer that contains binary STBL data.\n</p>\n<p>\n  In the sandbox, you can use <code>await Sandbox.import(filename)</code> to\n  load a media file. This tutorial has an included media file called\n  \"Sample.stbl\" that contains binary STBL data.\n</p>\n\n<h4>Writing a STBL Binary</h4>\n<p>\n  To save a <code>StringTableResource</code> object as a file, you have to get\n  its buffer with the <code>getBuffer()</code> method. If you view the S4TK\n  documentation, you'll see that this method has some optional arguments, but\n  for the most part, you don't have to worry about them.\n</p>\n<p>\n  In the sandbox, you can use <code>Sandbox.download(filename, buffer)</code> to\n  save the string table to your computer.\n</p>\n\n<h4>Note about Node</h4>\n<p>\n  When using S4TK in Node, remember that <code>import()</code> and\n  <code>download()</code> are not available. You'll have to use the\n  <code>fs</code> Node module to read & write files.\n</p>\n"},{"script":"const { StringTableResource } = require(\"@s4tk/models\");\n\n// ==================================================\n// Reading a String Table JSON (Array Literal)\n\n// you can create the stbl JSON as an array literal\nconst json1 = [\n  {\n    key: 12345,\n    value: \"First\",\n  },\n  {\n    key: 67890,\n    value: \"Second\",\n  },\n];\n\n// and then load it directly into a string table\nconst stbl1 = new StringTableResource(json1);\n\n// let's verify that the stbl was created correctly\nSandbox.test(\"should have size of 2\", stbl1.size === 2);\n\nSandbox.test(\"first key should be 12345\", stbl1.entries[0].key === 12345);\n\nSandbox.test(\n  'second value should be \"Second\"',\n  stbl1.entries[1].value === \"Second\"\n);\n\n// ==================================================\n// Reading a String Table JSON (JSON File)\n\n// this tutorial provides a JSON file called Sample.json\nconst jsonBuffer = await Sandbox.import(\"Sample.json\");\n\n// since import() returns a buffer, you need to convert\n// the buffer to a string in order to use JSON.parse()\nconst jsonString = jsonBuffer.toString();\n\n// let's see what that JSON actually looks like\nSandbox.output(\"Loaded JSON:\", jsonString);\n\n// JSON.parse() is a built-in JavaScript function that\n// converts a JSON string to an object\nconst json2 = JSON.parse(jsonString);\n\n// as long as the JSON is a list of objects with key/value\n// pairs, you can pass it to new StringTableResource()\n// to create a STBL with existing entries\nconst stbl2 = new StringTableResource(json2);\n\n// just to confirm that the stbl is loaded, check its size\nSandbox.output(`stbl size: ${stbl2.size}`);\n\n// ==================================================\n// Writing a String Table JSON\n\n// to get a JSON for a string table, use `toJsonObject()`\nconst outputJson = stbl2.toJsonObject();\n\n// JSON.stringify() is a built-in JavaScript function that\n// converts a JSON object to a string, the null/2 arguments\n// are just for formatting purposes\nconst outputJsonString = JSON.stringify(outputJson, null, 2);\n\n// once you have the JSON string, you can use `Sandbox.download()`\n// to save it to your computer\nSandbox.download(\"StringTable.json\", outputJsonString);\n","guide":"<h2>String Table JSONs</h2>\n<p>\n  Using JSON for string tables is a bit niche, but when done correctly, can make\n  your string management much easier.\n</p>\n\n<h4>Reading a STBL JSON</h4>\n<p>\n  The <code>new StringTableResource()</code> constructor is able to accept a\n  list of objects containing key/value pairs - this is a JSON. This JSON can\n  either be defined as an array literal, or it can be loaded from a JSON file.\n</p>\n<p>\n  Regardless of how you get your hands on the JSON, all you have to do is pass\n  it into the constructor, and you'll have a string table with default entries.\n  You can add, get, edit, and delete entries from these string tables just as\n  you did with the string table you created from scratch on the previous page.\n</p>\n\n<h4>Writing a STBL JSON</h4>\n<p>\n  Once you have a string table object, regardless of how it was made, you can\n  turn it into a JSON with the <code>toJsonObject()</code> method. Check the\n  docs for optional arguments that this method accepts.\n</p>\n<p>\n  From there, you can do whatever you want with the JSON. Iterate over it, save\n  it to a file, load it into another STBL - anything.\n</p>\n"}],"media":{"Sample.json":"WwogIHsKICAgICJrZXkiOiAzMDU0MTk4OTYsCiAgICAidmFsdWUiOiAiRmlyc3Qgc3RyaW5nIgogIH0sCiAgewogICAgImtleSI6IDIyNzE1NjA0ODEsCiAgICAidmFsdWUiOiAiU2Vjb25kIHN0cmluZyIKICB9Cl0=","Sample.stbl":"U1RCTAUAAAEAAAAAAAAAAAAzAAAAIuZxQwAyAE5ldmVyIGdvbm5hIGdpdmUgeW91IHVwLCBuZXZlciBnb25uYSBsZXQgeW91IGRvd24u"}}