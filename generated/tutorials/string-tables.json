{"key":"string-tables","pages":[{"script":"const { StringTableResource } = require(\"@s4tk/models\");\n\n// ==================================================\n// Creating a String Table\n\n// create a new, empty string table\nconst stbl = new StringTableResource();\n\n// ==================================================\n// Adding New Strings\n\n// add the string \"First\", with key = FNV32 hash of \"First\"\nstbl.addAndHash(\"First\");\n\n// add the string \"Second\", with key = FNV32 hash of \"creatorName:string_Second\"\nstbl.addAndHash(\"Second\", \"creatorName:string_Second\");\n\n// add the string \"Third\", with key = 0x12345678\nstbl.add(0x12345678, \"Third\");\n\n// ==================================================\n// Getting Strings\n\n// get a string by its key\nconst first = stbl.getByKey(0x3b83da79); // first entry\nSandbox.output(`First value: \"${first.value}\"`);\n\n// get a string by its value\nconst second = stbl.getByValue(\"Second\"); // second entry\nSandbox.output(`Second value: \"${second.value}\"`);\n\n// get a string by its index (remember, indices start at 0!)\nconst third = stbl.entries[2]; // third entry\nSandbox.output(`Third value: \"${third.value}\"`);\n\n// ==================================================\n// Editing Strings\n\nSandbox.output(`Before edit: ${first.key} = \"${first.value}\"`);\n\n// edit the first string's key\nfirst.key = 12345;\n\n// edit the first string's value\nfirst.value = \"New first!\";\n\nSandbox.output(`After edit: ${first.key} = \"${first.value}\"`);\n\n// ==================================================\n// Deleting Strings\n\nSandbox.output(`Size before deleting: ${stbl.size}`);\n\n// delete the first entry by its key\nstbl.deleteByKey(12345);\n\n// find an entry by its value, then delete by its ID\nconst toDelete = stbl.getByValue(\"Second\");\nstbl.delete(toDelete.id);\n\nSandbox.output(`Size after deleting: ${stbl.size}`);\n","guide":"<h2>StringTableResource</h2>\n<p>\n  When dealing with string tables, you'll need to use the\n  <code>StringTableResource</code> class from @s4tk/models.\n</p>\n<p class=\"footnote\">\n  This tutorial assumes that you are somewhat familiar with\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/abstracts/MappedModel\"\n    target=\"_blank\"\n    >mapped models</a\n  >. If you are not, you should read the\n  <a href=\"#/tutorials/intro-to-s4tk\">Intro to S4TK tutorial</a>\n  before this one.\n</p>\n\n<h4>Creating STBL</h4>\n<p>\n  To create a new, empty string table, you can use\n  <code>new StringTableResource()</code>.\n</p>\n\n<h4>Adding Strings</h4>\n<p>\n  The <code>addAndHash(value: string)</code> method adds a string to the table,\n  using its FNV32 hash as the key. However, hashing the value itself is not very\n  safe in terms of making a unique hash.\n</p>\n<p>\n  Instead, you should use\n  <code>addAndHash(value: string, toHash: string)</code>, which hashes the\n  <code>toHash</code> argument for the key instead. This is safer than hashing\n  the value itself, because you can append your creator name to the front.\n</p>\n<p>\n  Finally, if you know the exact key you want, you can use\n  <code>add(key: number, value: string)</code>, which adds the key/string pair\n  to the table.\n</p>\n\n<h4>Getting Strings</h4>\n<p>\n  Since a string table is a mapped model, each key/value pair is called an\n  <strong>entry</strong>. Specifically, the entries in a string table are of the\n  type\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/types/StringEntry\"\n    target=\"_blank\"\n    ><code>StringEntry</code></a\n  >, which has <code>id</code>, <code>key</code>, and\n  <code>value</code> properties.\n</p>\n<p>You can get a string entry by its...</p>\n<ul>\n  <li>ID: <code>get(id: number)</code></li>\n  <li>Key: <code>getByKey(key: number)</code></li>\n  <li>Value: <code>getByValue(value: string)</code></li>\n</ul>\n<p>\n  Additionally, you can use the <code>entries</code> property, which is a list\n  of all of the entries in the string table. You can use this list to get\n  entries by their index, or to loop/iterate over all of the entries.\n</p>\n<p class=\"footnote\">\n  Note that adding/removing entries to/from the <code>entries</code> list will\n  NOT add/remove them from the string table - you MUST use the add/delete\n  methods.\n</p>\n\n<h4>Editing Strings</h4>\n<p>\n  Once you have a <code>StringEntry</code> object, editing it is as easy as\n  setting the <code>key</code> and <code>value</code> properties.\n</p>\n<p class=\"footnote\">\n  Note that string entries also have a property called\n  <code>string</code>, which is just an alias for <code>value</code>.\n</p>\n\n<h4>Deleting Strings</h4>\n<p>You can delete a string entry by its...</p>\n<ul>\n  <li>ID: <code>delete(id: number)</code></li>\n  <li>Key: <code>deleteByKey(key: number)</code></li>\n</ul>\n<p class=\"footnote\">\n  If you're confused about IDs vs. keys, it is explained in the\n  <a href=\"#/tutorials/intro-to-s4tk\">Intro to S4TK tutorial</a>.\n</p>\n<p class=\"footnote\">\n  For posterity, the key is what actually gets written to the string table, and\n  the ID is a unique identifier that S4TK uses internally (just in case any keys\n  are repeated).\n</p>\n"},{"script":"const { StringTableResource } = require(\"@s4tk/models\");\n\n// ==================================================\n// Reading a String Table Binary\n\n// first, you need to get a buffer containing STBL data\n// in the sandbox, use `Sandbox.import(filename)`\nconst buffer = await Sandbox.import(\"Sample.stbl\");\n\n// then, you can use the static `StringTableResource.from()`\n// method to create a StringTableResource\nconst stbl = StringTableResource.from(buffer);\n\n// just to confirm that the stbl is loaded, check its value\nSandbox.output(`First value: ${stbl.entries[0].value}`);\n\n// ==================================================\n// Writing a String Table Binary\n\n// to get the buffer for a string table, use `getBuffer()`\nconst outputBuffer = stbl.getBuffer();\n\n// once you have the buffer, you can use `Sandbox.download()`\n// to save it to your computer\nSandbox.download(\"Sample.stbl\", outputBuffer);\n","guide":"<h2>String Table Binaries</h2>\n<p>\n  If you want to load an existing STBL into a <code>StringTableResource</code>,\n  or want to write one to a file, you need to work with binary STBL buffers.\n</p>\n\n<h4>Reading a STBL Buffer</h4>\n<p>\n  First, you have to get your hands on a buffer that contains binary STBL data.\n  Then, you can use <code>StringTableResource.from(buffer)</code> to load it\n  into a string table model.\n</p>\n<p>\n  In the sandbox, you can use <code>await Sandbox.import(filename)</code> to\n  load a media file. This tutorial has an included media file called\n  \"Sample.stbl\" that contains binary STBL data.\n</p>\n\n<h4>Writing a STBL Buffer</h4>\n<p>\n  To save a <code>StringTableResource</code> object as a file, you have to get\n  its buffer with the <code>getBuffer()</code> method.\n</p>\n<p>\n  In the sandbox, you can use <code>Sandbox.download(filename, buffer)</code> to\n  save the string table to your computer.\n</p>\n\n<h4>Note about Node</h4>\n<p>\n  When using S4TK in Node, remember that <code>import()</code> and\n  <code>download()</code> are not available. You'll have to use the\n  <code>fs</code> Node module to read & write files.\n</p>\n"},{"script":"const { StringTableResource } = require(\"@s4tk/models\");\n\n// ==================================================\n// Reading a String Table JSON (Array Literal)\n\n// you can create the stbl JSON as an array literal\nconst json1 = [\n  {\n    key: 12345,\n    value: \"First\",\n  },\n  {\n    key: 67890,\n    value: \"Second\",\n  },\n];\n\n// and then load it directly into a string table\nconst stbl1 = new StringTableResource(json1);\n\n// let's verify that the stbl was created correctly\nSandbox.test(\"should have size of 2\", stbl1.size === 2);\n\nSandbox.test(\"first key should be 12345\", stbl1.entries[0].key === 12345);\n\nSandbox.test(\n  'second value should be \"Second\"',\n  stbl1.entries[1].value === \"Second\"\n);\n\n// ==================================================\n// Reading a String Table JSON (JSON File)\n\n// this tutorial provides a JSON file called Sample.json\nconst jsonBuffer = await Sandbox.import(\"Sample.json\");\n\n// since import() returns a buffer, you need to convert\n// the buffer to a string in order to use JSON.parse()\nconst jsonString = jsonBuffer.toString();\n\n// let's see what that JSON actually looks like\nSandbox.output(\"Loaded JSON:\", jsonString);\n\n// JSON.parse() is a built-in JavaScript function that\n// converts a JSON string to an object\nconst json2 = JSON.parse(jsonString);\n\n// as long as the JSON is a list of objects with key/value\n// pairs, you can pass it to new StringTableResource()\n// to create a STBL with existing entries\nconst stbl2 = new StringTableResource(json2);\n\n// just to confirm that the stbl is loaded, check its size\nSandbox.output(`stbl size: ${stbl2.size}`);\n\n// ==================================================\n// Writing a String Table JSON\n\n// to get a JSON for a string table, use `toJsonObject()`\nconst outputJson = stbl2.toJsonObject();\n\n// JSON.stringify() is a built-in JavaScript function that\n// converts a JSON object to a string, the null/2 arguments\n// are just for formatting purposes\nconst outputJsonString = JSON.stringify(outputJson, null, 2);\n\n// once you have the JSON string, you can use `Sandbox.download()`\n// to save it to your computer\nSandbox.download(\"StringTable.json\", outputJsonString);\n","guide":"<h2>String Table JSONs</h2>\n<p>\n  Using JSON for string tables is a bit niche, but when done correctly, can make\n  your string management much easier.\n</p>\n\n<h4>Reading a STBL JSON</h4>\n<p>\n  The <code>StringTableResource</code> constructor is able to accept a list of\n  objects containing key/value pairs - this is a JSON. This JSON can either be\n  defined as an array literal, or it can be loaded from a JSON file.\n</p>\n<p>\n  Regardless of how you get your hands on the JSON, all you have to do is pass\n  it into the constructor, and you'll have a string table with default entries.\n</p>\n<p class=\"footnote\">\n  You can add, get, edit, and delete entries from these string tables just as\n  you did with the string table you created from scratch on the previous page.\n</p>\n\n<h4>Writing a STBL JSON</h4>\n<p>\n  Once you have a <code>StringTableResource</code>, regardless of how it was\n  made, you can turn it into a JSON with the <code>toJsonObject()</code> method.\n</p>\n<p>\n  From there, you can do whatever you want with the JSON. Iterate over it, save\n  it to a file, load it into another STBL - anything.\n</p>\n<p class=\"footnote\">\n  The <code>toJsonObject()</code> method accepts some optional arguments. If you\n  want to learn about them, check out the documentation.\n</p>\n"},{"script":"// write your code here\n","guide":"<h2>Challenge</h2>\n<p>\n  Now that you've read about the <code>StringTableResource</code> class, let's\n  put your skills to the test.\n</p>\n\n<h4>Importing from S4TK</h4>\n<p>\n  In order to use <code>StringTableResource</code>, you need to import it. How\n  do you do that?\n</p>\n\n<h4>Create a STBL</h4>\n<p>\n  Create a new string table with one entry by default. Remember the various ways\n  to create a string table - how can you make one with existing values?\n</p>\n\n<h4>Add an Entry</h4>\n<p>Add a new entry to your string table, however you'd like.</p>\n\n<h4>Get an Entry</h4>\n<p>Get the first entry, the one the stbl was created with, by its key.</p>\n\n<h4>Delete an Entry</h4>\n<p>Delete the entry you just got in the last step. Delete it by its ID.</p>\n\n<h4>Write the STBL</h4>\n<p>Download the string table binary to a file.</p>\n"},{"script":"// There are many ways you could have done this challenge,\n// do not worry if the code doesn't match exactly\n\nconst { StringTableResource } = require(\"@s4tk/models\");\n\nconst stbl = new StringTableResource([\n  {\n    key: 12345,\n    value: \"First\",\n  },\n]);\n\nSandbox.output(`Initial size: ${stbl.size}`);\nSandbox.output(\n  `Initial entry: ${stbl.entries[0].key} = ${stbl.entries[0].value}`\n);\n\nstbl.add(67890, \"Second\");\nSandbox.output(`Size after add: ${stbl.size}`);\n\nconst firstEntry = stbl.getByKey(12345);\nSandbox.output(`First entry value: ${firstEntry.value}`);\n\nstbl.delete(firstEntry.id);\nSandbox.output(`Size after delete: ${stbl.size}`);\n\nSandbox.download(\"StringTable.stbl\", stbl.getBuffer());\n","guide":"<h2>Challenge Solution</h2>\n<p>\n  Congrats! You're done learning about string tables for now. For more\n  information, visit the docs linked above.\n</p>\n"}],"media":{"Sample.json":"WwogIHsKICAgICJrZXkiOiAzMDU0MTk4OTYsCiAgICAidmFsdWUiOiAiRmlyc3Qgc3RyaW5nIgogIH0sCiAgewogICAgImtleSI6IDIyNzE1NjA0ODEsCiAgICAidmFsdWUiOiAiU2Vjb25kIHN0cmluZyIKICB9Cl0=","Sample.stbl":"U1RCTAUAAAEAAAAAAAAAAAAzAAAAIuZxQwAyAE5ldmVyIGdvbm5hIGdpdmUgeW91IHVwLCBuZXZlciBnb25uYSBsZXQgeW91IGRvd24u"}}