{"key":"intro-to-s4tk","pages":[{"script":"// the @s4tk/models package contains all of S4TK's models\nconst { Package, StringTableResource } = require(\"@s4tk/models\");\n\n// packages are represented by the \"Package\" class model\nconst pkg = new Package();\n\n// string tables are represented by the \"StringTableResource\" class model,\n// and since string tables can be contained by packages, they are a resource\nconst stbl = new StringTableResource();\n\n// this is a buffer, they are built-in to Node\nconst buffer = Buffer.from(\"This is a buffer! See? They're not scary.\");\nSandbox.output(buffer.toString());\n","guide":"<h2>Welcome to S4TK</h2>\n<p>\n  S4TK's tagline is that it can \"read and write package files and the resources\n  they contain\", but what does that mean?\n</p>\n\n<h4>Terminology</h4>\n<p>\n  Packages are just a data format, somewhat similar to a ZIP archive, and mean\n  nothing on their own. What really matters are the <strong>resources</strong>\n  they contain, such as tuning, string tables, SimData, object definitions, etc.\n</p>\n<p>\n  S4TK is driven by <strong>models</strong>, which are just classes that\n  represent data. S4TK has models for packages and resources, and they are all\n  defined in the @s4tk/models npm package.\n</p>\n<p>\n  S4TK models can be read from and written to <strong>buffers</strong>, which\n  are fixed-length lists of bytes containing data. This data can either be\n  binary, like packages, or plain text, like XML.\n</p>\n<p class=\"footnote\">\n  Do not worry - you don't need to understand binary file formats or how buffers\n  work to use S4TK. Using the\n  <a href=\"https://nodejs.org/api/fs.html\" target=\"_blank\">fs</a> Node module,\n  you can read/write buffers from/to files.\n</p>\n<p class=\"footnote\">\n  If you'd like to learn more about buffers, check out the documentation for\n  Node's\n  <a href=\"https://nodejs.org/api/buffer.html\" target=\"_blank\">Buffer</a> class.\n</p>\n"},{"script":"const { Package, StringTableResource } = require(\"@s4tk/models\");\n\n/*\n  NOTE: Don't feel like you have to memorize all of this - the point of this\n  tutorial is to show you how similar two different models can be, thanks to the\n  base classes they inherit from. You'll learn more about packages and string\n  tables in their respective tutorials.\n*/\n\n// ==================================================\n// Writable Model Methods\n\n// if you have a buffer containing binary data, you can load it into its\n// respective model with its `from()` method\n\nconst pkgBuffer = await Sandbox.import(\"Sample.package\");\nconst pkg = Package.from(pkgBuffer);\n\nconst stblBuffer = await Sandbox.import(\"Sample.stbl\");\nconst stbl = StringTableResource.from(stblBuffer);\n\n// to get the buffer for a model, you can use its `getBuffer()` method\n\n// the first 4 bytes of a binary package should be \"DBPF\"\nSandbox.output(\"Pkg: \" + pkg.getBuffer().toString(\"utf-8\", 0, 4));\n\n// the first 4 bytes of a binary string table should be \"STBL\"\nSandbox.output(\"Stbl: \" + stbl.getBuffer().toString(\"utf-8\", 0, 4));\n\n// ==================================================\n// Mapped Model Methods\n\n// Package and StringTableResource both inherit from MappedModel\n\n// mapped models have a `size` property, which is the number of items contained\nSandbox.output(`Pkg size: ${pkg.size}`);\nSandbox.output(`Stbl size: ${stbl.size}`);\n\n// you can add key/value pairs with `add()`, which returns the created entry\nconst resourceKey = { type: 0x220557da, group: 0, instance: 0x1234567890abcd };\nconst stblEntry = pkg.add(resourceKey, stbl);\nconst stringEntry = stbl.add(0x12345678, \"New string!\");\n\n// and retrieve entries by their key\nSandbox.test(\"Pkg get\", pkg.getByKey(resourceKey) === stblEntry);\nSandbox.test(\"Stbl get\", stbl.getByKey(0x12345678) === stringEntry);\n\n// you can get keys/values from entries\nSandbox.test(\"Stbl entry\", stblEntry.value === stbl);\nSandbox.test(\"String entry\", stringEntry.value === \"New string!\");\n\n// to delete an entry, you should use its ID, NOT its key (read the footnote in\n// the tutorial guide for more information about IDs vs. keys)\npkg.delete(stblEntry.id);\nstbl.delete(stringEntry.id);\n\n// MappedModels have a LOT of methods for getting and setting data - you'll\n// learn more about these methods in the Package and StringTableResource\n// tutorials, or by reading through the MappedModel documentation\n","guide":"<h2>Model Bases</h2>\n<p>\n  While not something you'd normally concern yourself with, it may be worth\n  reading about the base classes that various models descend from, since they\n  define common behavior.\n</p>\n<p>\n  Don't feel like you have to remember or even understand the code presented for\n  this tutorial. The sole purpose here is to demonstrate how similar two\n  completely different models can be, thanks to the base classes they inherit\n  from.\n</p>\n\n<h4>Writable Models</h4>\n<p>\n  The\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/abstracts/WritableModel\"\n    target=\"_blank\"\n    ><code>WritableModel</code></a\n  >\n  base class defines behavior that is shared between\n  <strong>every</strong> model that can be written to disk.\n</p>\n<p>\n  One of the most important methods to know about is the static\n  <code>from(buffer: Buffer)</code> method that every model implements. It\n  accepts a buffer of data to load into the model, such as a binary STBL or\n  plain text XML.\n</p>\n<p>\n  Another important method to know about is <code>getBuffer()</code>, which\n  returns an uncompressed buffer of the model's data - this is the inverse of\n  the <code>from()</code> method.\n</p>\n<p class=\"footnote\">\n  Check the docs for more information about the optional arguments that\n  <code>from()</code> and <code>getBuffer()</code> accept. For most scripts, you\n  do not need to worry about these options.\n</p>\n\n<h4>Mapped Models</h4>\n<p>\n  The\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/abstracts/MappedModel\"\n    target=\"_blank\"\n    ><code>MappedModel</code></a\n  >\n  base class inherits from <code>WritableModel</code>, and is used for models\n  that map keys to values. At the time of writing, the two models that do so are\n  <code>Package</code> and <code>StringTableResource</code>.\n</p>\n<p>\n  The vast majority of methods you'll use to interact with packages and string\n  tables come from this base class, so I highly recommend that you read through\n  the docs.\n</p>\n<p>\n  A key/value pair in a mapped model is called an <strong>entry</strong>. The\n  most important thing to note about entries are their <code>key</code>,\n  <code>value</code>, and <code>id</code> properties.\n</p>\n<p class=\"footnote\">\n  Mapped models are lists of key/value pairs, not actual mappings - therefore,\n  keys are allowed to repeat. S4TK uses an internal <code>id</code> property\n  that acts as a unique, constant identifier, but this ID does not exist in the\n  actual file binaries.\n</p>\n<p class=\"footnote\">\n  You generally do not have to worry about it, just know that it exists and is\n  the preferred way to get and delete entries.\n</p>\n"},{"script":"","guide":"<h2>Keys & Enums</h2>\n<p>\n  You'll be working with resource keys a lot, and S4TK has several enums to help\n  you with them. While you don't need to know everything about these enums just\n  yet, you should be familiar with which ones are used for what.\n</p>\n\n<h4>Types</h4>\n<p>\n  For tuning types like actions and snippets, you can use the\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/enums/TuningResourceType\"\n    target=\"_blank\"\n    ><code>TuningResourceType</code></a\n  >\n  enum. For binary file types like string tables and SimData, you can use the\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/enums/BinaryResourceType\"\n    target=\"_blank\"\n    ><code>BinaryResourceType</code></a\n  >\n  enum.\n</p>\n<p class=\"footnote\">\n  The reason tuning and binary types are split into two enums is so you can use\n  <code>type in TuningResourceType</code> to determine if a resource is tuning\n  based on its type.\n</p>\n\n<h4>Groups</h4>\n<p>\n  For most resources, the group number does not matter and should be set to 0.\n  However, for SimData, the group serves as a secondary type, and\n  <strong>must</strong> be the 24-bit version of its associated tuning's type.\n  For SimData groups, you can use the\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/enums/SimDataGroup\"\n    target=\"_blank\"\n    ><code>SimDataGroup</code></a\n  >\n  enum.\n</p>\n<p class=\"footnote\">\n  Not every tuning type has an associated SimData group, and not every SimData\n  group is the 24-bit version of its 32-bit tuning type. These are general\n  patterns, but there are exceptions.\n</p>\n\n<h4>Instances</h4>\n<p>\n  Instances are the unique part of resource keys, and there is therefore no enum\n  for them. However, the top byte of string table instances\n  <strong>must</strong> match their locale, and there <em>is</em> an enum for\n  that -\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/enums/StringTableLocale\"\n    target=\"_blank\"\n    ><code>StringTableLocale</code></a\n  >.\n</p>\n<p>\n  The <code>StringTableLocale</code> enum also has some helper functions that\n  will set the high byte of an instance for you. This is briefly demoed in the\n  script editor, but you'll read more about it in the string table tutorial.\n</p>\n\n<h4>Hashing</h4>\n<p>\n  Another very important aspect of resource keys is FNV hashing. If you want to\n  learn how to generate FNV hashes using S4TK, you should check out the very\n  brief <a href=\"#/tutorials/hashing\">hashing tutorial</a> when you are done\n  with this one.\n</p>\n"}],"media":{"Sample.package":"REJQRgIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAwAAAP0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeJw1TrsOgjAU3fmKm7srVAElacuiA4mRQYxxagxUbEJviYDx8y1Rt3Nynjx/2w5e+jkYRwLZMkLQVLvGUCtwGu+LLeYy4AXUAk/O6hOZvtcjghE4/LH12GvKumbqNAJ9+c+r5tz48I0Ig99gWcKiOI2TLFpFa7bJWIoyAODVHCTt36jWEd1QHvaVupZntSsvRx5W/khYyOADhoQ3fQAAAACcFvJ9AAAAAG+l2qXclBhkYAAAAJ0AAIC1AAAAQloBAA==","Sample.stbl":"U1RCTAUAAAEAAAAAAAAAAAAzAAAAIuZxQwAyAE5ldmVyIGdvbm5hIGdpdmUgeW91IHVwLCBuZXZlciBnb25uYSBsZXQgeW91IGRvd24u"}}