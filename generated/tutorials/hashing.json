{"key":"hashing","pages":[{"script":"const { fnv32, fnv64 } = require(\"@s4tk/hashing\");\n\nconst valueToHash = \"Text to hash\";\n\nSandbox.output(\n  `32-bit = ${fnv32(valueToHash)}`,\n  `32-bit = ${fnv32(valueToHash, true)} (w/ high bit)`,\n  `64-bit = ${fnv64(valueToHash)}`,\n  `64-bit = ${fnv64(valueToHash, true)} (w/ high bit)`\n);\n","guide":"<h2>FNV Hashing</h2>\n<p>\n  When adding resources to packages, you're going to need a hash to use for its\n  instance ID. That's what @s4tk/hashing is for.\n</p>\n\n<h4>Functions</h4>\n<p>\n  The two functions you're going to need the most are\n  <code>fnv32(text: string)</code> and <code>fnv64(text: string)</code>. These\n  produce 32-bit and 64-bit FNV hashes, respectively.\n</p>\n<p>\n  If you'd like to force the high bit to 1, you can do so by passing\n  <code>true</code> as the second argument.\n</p>\n"},{"script":"const {\n  formatResourceKey,\n  formatStringKey,\n} = require(\"@s4tk/hashing/formatting\");\n\nconst resourceKey = {\n  type: 0x220557da,\n  group: 0x8000000,\n  instance: 0x28fc74a94b197e5fn,\n};\n\nconst formattedResourceKey = formatResourceKey(resourceKey, \"-\");\nSandbox.output(`Resource Key: ${formattedResourceKey}`);\n\nconst stringKey = 0x1329b718;\nconst formattedStringKey = formatStringKey(stringKey);\nSandbox.output(`String Key: ${formattedStringKey}`);\n","guide":"<h2>Formatting Hashes</h2>\n<p>\n  If you ever need to format a hash as a hex string, that's what\n  @s4tk/hashing/formatting is for.\n</p>\n\n<h4>Functions</h4>\n<p>\n  There are several functions available, but the ones you'll find the most\n  useful are\n  <code>formatResourceKey(key: ResourceKey, delimeter?: string)</code> and\n  <code>formatStringKey(key: number)</code>.\n</p>\n<p>To see all of the available formatters, check the docs linked above.</p>\n"}],"media":{}}