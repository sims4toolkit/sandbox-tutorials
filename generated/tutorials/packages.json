{"key":"packages","pages":[{"script":"const { fnv64 } = require(\"@s4tk/hashing\");\nconst { formatResourceKey } = require(\"@s4tk/hashing/formatting\");\nconst { Package, StringTableResource } = require(\"@s4tk/models\");\nconst { BinaryResourceType, StringTableLocale } = require(\"@s4tk/models/enums\");\n\n// You don't need to do this, it's just for conciseness later\nconst { setHighByte, English, Italian } = StringTableLocale;\n\n// ==================================================\n// Creating a Package\n\n// Create a new, empty package\nconst pkg = new Package();\n\n// ==================================================\n// Adding Entries\n\n// First, you need to make your keys - we're going to add two string tables,\n// one in english, and one in italian, so let's make keys for those\n\n// Hash something to get an instance base for the string tables\nconst stblInstanceBase = fnv64(\"CreatorName_ModName:StringTable_1\");\n\n// Remember, there are several enums available to help with creating resource\n// keys, like BinaryResourceType and StringTableLocale (setHighByte, English,\n// and Italian all come from StringTableLocale -- check the imports!)\n\nconst englishResourceKey = {\n  type: BinaryResourceType.StringTable,\n  group: 0x80000000,\n  instance: setHighByte(English, stblInstanceBase),\n};\n\nconst italianResourceKey = {\n  type: BinaryResourceType.StringTable,\n  group: 0x80000000,\n  instance: setHighByte(Italian, stblInstanceBase),\n};\n\n// This tutorial supplies two string tables, so let's load those\n\nconst englishStbl = StringTableResource.from(\n  await Sandbox.import(\"English.stbl\")\n);\n\nconst italianStbl = StringTableResource.from(\n  await Sandbox.import(\"Italian.stbl\")\n);\n\n// Now that we have resources and their keys, we can use add()\nSandbox.output(`Size before adding 2 stbls: ${pkg.size}`);\npkg.add(englishResourceKey, englishStbl);\npkg.add(italianResourceKey, italianStbl);\nSandbox.output(`Size after adding 2 stbls: ${pkg.size}\\n`);\n\n// ==================================================\n// Getting Entries\n\n// This is a helper to make things more readable, you'll see it used in a bit\nfunction getFirstString(resourceEntry) {\n  // Remember, entries are key/value pairs - to get the actual string table,\n  // you need to use the `value` property\n  const stbl = resourceEntry.value;\n\n  // A string table is also a mapped model, so it also has a list of entries,\n  // but their key/value pairs are numbers and strings\n  const firstStringEntry = stbl.entries[0];\n  return firstStringEntry.value;\n}\n\n// Get the english STBL entry by its key\nconst englishEntry = pkg.getByKey(englishResourceKey);\nSandbox.output(`English value: ${getFirstString(englishEntry)}`);\n\n// Get the italian STBL entry by its index (remember, indicies start at 0!)\nconst italianEntry = pkg.entries[1];\nSandbox.output(`Italian string: ${getFirstString(italianEntry)}`);\n\n// It's also possible to get an entry by its value, but this is inefficient\n// and usually pointless for packages\nSandbox.test(\n  \"Get English STBL by value\",\n  pkg.getByValue(englishStbl) === englishEntry\n);\n\nSandbox.output(\"\"); // don't mind me, just putting a newline :)\n\n// ==================================================\n// Editing Entries\n\n// You can edit an existing key\nSandbox.output(`EN key before: ${formatResourceKey(englishEntry.key, \"-\")}`);\nenglishEntry.key.group = 0;\nSandbox.output(`EN key after: ${formatResourceKey(englishEntry.key, \"-\")}`);\n\n// You can even replace entire keys\nSandbox.output(`IT key before: ${formatResourceKey(italianEntry.key, \"-\")}`);\nitalianEntry.key = {\n  type: BinaryResourceType.StringTable,\n  group: 0,\n  instance: italianEntry.key.instance,\n};\nSandbox.output(`IT key after: ${formatResourceKey(italianEntry.key, \"-\")}\\n`);\n\n// You can edit an existing resource (`resource` is an alias for `value`, this\n// is exactly the same as using englishEntry.value.size)\nSandbox.output(`Stbl size before edit: ${englishEntry.resource.size}`);\nenglishEntry.resource.addAndHash(\"Some new string\");\nSandbox.output(`Stbl size after edit: ${englishEntry.resource.size}\\n`);\n\n// You can also set `value`/`resource` to a whole new object, but if you find\n// yourself doing that, you're probably doing something wrong (most of the time,\n// there is simply no need to replace the entire resource)\n\n// ==================================================\n// Deleting Entries\n\n// Italians have taken over the planet, and English is now extinct. Let's delete\n// the English string table, since no one needs it anymore.\n\nSandbox.output(`Size before deleting EN: ${pkg.size}`);\npkg.delete(englishEntry.id);\nSandbox.output(`Size after deleting EN: ${pkg.size}`);\n\n// Humans are now extinct. Idk how, they just are. Anyways, there's no need for\n// the Italian STBL now, so let's delete it too.\n\n// Ideally, you should always delete entries by their ID, but you're allowed to\n// delete them by their key if you want.\n\nSandbox.output(`Size before deleting IT: ${pkg.size}`);\npkg.deleteByKey(italianEntry.key);\nSandbox.output(`Size after deleting IT: ${pkg.size}`);\n","guide":"<h2>Package</h2>\n<p>\n  When dealing with packages, you'll need to use the <code>Package</code> class\n  from @s4tk/models.\n</p>\n<p class=\"footnote\">\n  This tutorial assumes that you are familiar with\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/types/ResourceKey\"\n    target=\"_blank\"\n    >ResourceKeys</a\n  >,\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/abstracts/MappedModel\"\n    target=\"_blank\"\n    >MappedModels</a\n  >, and\n  <a href=\"https://sims4toolkit.com/#/docs/hashing\" target=\"_blank\"\n    >@s4tk/hashing</a\n  >. If you are not, you should read the\n  <a href=\"#/tutorials/intro-to-s4tk\" target=\"_blank\">Intro to S4TK</a> and\n  <a href=\"#/tutorials/hashing\" target=\"_blank\">Hashing</a> tutorials before\n  this one.\n</p>\n\n<h4>Creating a Package</h4>\n<p>To create a new, empty package, you can use <code>new Package()</code>.</p>\n<p>\n  If you want to create a package with existing entries, you can pass a list of\n  key/resource pairs as the first argument to the constructor. Check the docs if\n  you want more information.\n</p>\n<p class=\"footnote\">\n  Tip: Never use the name \"package\" for a variable, as <code>package</code> is a\n  reserved word in JavaScript - I usually stick with \"pkg\".\n</p>\n\n<h4>Adding Entries</h4>\n<p>\n  To add an entry, you need a resource and a resource key. A resource key is an\n  object with <code>type</code>, <code>group</code>, and <code>instance</code>\n  properties.\n</p>\n<p>\n  Once you have a resource and its key, you can add them to the package with the\n  <code>add(key: ResourceKey, value: Resource)</code> method.\n</p>\n\n<h4>Getting Entries</h4>\n<p>\n  Since a package is a mapped model, each key/value pair is called an\n  <strong>entry</strong>. Specifically, the entries in a package are of the type\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/types/ResourceEntry\"\n    target=\"_blank\"\n    ><code>ResourceEntry</code></a\n  >, which has <code>id</code>, <code>key</code>, and\n  <code>value</code> properties.\n</p>\n<p>You can get a resource entry by its...</p>\n<ul>\n  <li>ID: <code>get(id: number)</code></li>\n  <li>Key: <code>getByKey(key: ResourceKey)</code></li>\n  <li>Value: <code>getByValue(value: Resource)</code></li>\n</ul>\n<p>\n  Additionally, you can use the <code>entries</code> property, which is a list\n  of all of the entries in the package. You can use this list to get entries by\n  their index, or to loop/iterate over all of the entries.\n</p>\n<p class=\"footnote\">\n  Note that adding/removing entries to/from the <code>entries</code> list will\n  NOT add/remove them from the package - you MUST use the add/delete methods.\n</p>\n\n<h4>Editing Entries</h4>\n<p>\n  Once you have a <code>ResourceEntry</code> object, editing it is as easy as\n  editing the <code>key</code> and <code>value</code> properties.\n</p>\n<p>\n  You can either set these to entirely new keys and resources, or you can mutate\n  the existing key/resource.\n</p>\n<p class=\"footnote\">\n  Note that resource entries also have a property called\n  <code>resource</code>, which is just an alias for <code>value</code>.\n</p>\n\n<h4>Deleting Entries</h4>\n<p>You can delete a resource entry by its...</p>\n<ul>\n  <li>ID: <code>delete(id: number)</code></li>\n  <li>Key: <code>deleteByKey(key: ResourceKey)</code></li>\n</ul>\n<p class=\"footnote\">\n  If you're confused about IDs vs. keys, it is explained in the\n  <a href=\"#/tutorials/intro-to-s4tk\" target=\"_blank\">Intro to S4TK tutorial</a\n  >.\n</p>\n<p class=\"footnote\">\n  For posterity, the key is what actually gets written to the package, and the\n  ID is a unique identifier that S4TK uses internally (just in case any keys are\n  repeated).\n</p>\n"},{"script":"const { Package } = require(\"@s4tk/models\");\n\n// ==================================================\n// Reading a Package\n\n// First, you need to get a buffer containing DBPF data\n// This tutorial provides a package called \"Sample.package\"\nconst buffer = await Sandbox.import(\"Sample.package\");\n\n// Then, you can use the static `Package.from()` method to create a Package\nconst pkg = Package.from(buffer);\n\n// Just to confirm that the pkg is loaded, check its size\nSandbox.output(`Loaded size: ${pkg.size}`);\n\n// ==================================================\n// Writing a Package\n\n// To get the buffer for a package, use `getBuffer()`\nconst outputBuffer = pkg.getBuffer();\n\n// Once you have the buffer, you can use `Sandbox.download()`\nSandbox.download(\"Sample.package\", outputBuffer);\n\n// Remember: In Node, you must use the `fs` module to read and write files,\n// since `import()` and `download()` are specific to the sandbox.\n","guide":"<h2>Package Binaries</h2>\n<p>\n  To load an existing package into a <code>Package</code>, or to save one as a\n  file, you need to work with binary DBPF buffers.\n</p>\n<p class=\"footnote\">\n  \"DBPF\" stands for \"Database Packed File\", and it is the name of the binary\n  format that package files use. You don't really need to know this, but I'm\n  telling you anyways &#10024;.\n</p>\n\n<h4>Reading a DBPF Buffer</h4>\n<p>\n  First, you have to get a buffer that contains binary package data, and then\n  load that buffer into a <code>Package</code> with <code>from(buffer)</code>.\n</p>\n<p>\n  This tutorial provides a package named \"Sample.package\" - you can import it\n  with <code>await Sandbox.import()</code>.\n</p>\n\n<h4>Writing a DBPF Buffer</h4>\n<p>\n  To save a <code>Package</code> object as a file, you have to get its buffer\n  with the <code>getBuffer()</code> method.\n</p>\n<p>\n  In the sandbox, you can use <code>Sandbox.download(filename, buffer)</code> to\n  save the package to your computer.\n</p>\n\n<h4>Note about Node</h4>\n<p>\n  When using S4TK in Node, remember that <code>import()</code> and\n  <code>download()</code> are not available. You'll have to use the\n  <code>fs</code> Node module to read & write files.\n</p>\n"},{"script":"const { Package } = require(\"@s4tk/models\");\nconst { BinaryResourceType } = require(\"@s4tk/models/enums\");\nconst { formatResourceKey } = require(\"@s4tk/hashing/formatting\");\n\nconst buffer = await Sandbox.import(\"Sample.package\");\n\n// allEntries is a list of key/value pairs - there is no Package object\nconst allEntries = Package.extractResources(buffer);\n\nSandbox.output(\"Extract all:\");\nallEntries.forEach((entry) => {\n  Sandbox.output(` | ${formatResourceKey(entry.key, \"-\")}`);\n});\n\n// this will extract just the string table(s), using a resource fileter\nconst stblsOnly = Package.extractResources(buffer, {\n  resourceFilter: (type) => type === BinaryResourceType.StringTable,\n});\n\nSandbox.output(\"\\nExtract STBLs:\");\nstblsOnly.forEach((entry) => {\n  Sandbox.output(` | ${formatResourceKey(entry.key, \"-\")}`);\n});\n","guide":"<h2>Extracting from Packages</h2>\n<p>\n  If all you need are the resources, rather than the package itself, then you\n  can extract them and forego the <code>Package</code> object.\n</p>\n\n<h4>Extracting Resources</h4>\n<p>\n  The static <code>extractResources(buffer)</code> method accepts a DBPF buffer\n  as an argument, parses it, and returns a list of\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/types/ResourceKeyPair\"\n    target=\"_blank\"\n    ><code>ResourceKeyPair</code></a\n  >\n  objects, which have <code>key</code> and <code>value</code> properties.\n</p>\n<p>\n  These key/value pairs are just like entries, except they do not belong to any\n  mapped model.\n</p>\n\n<h4>Optional Arguments</h4>\n<p>\n  The <code>extractResources(buffer, options?)</code> method accepts a second\n  argument, which is an object of\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/types/PackageFileReadingOptions\"\n    target=\"_blank\"\n    ><code>PackageFileReadingOptions</code></a\n  >.\n</p>\n<p>\n  One of the most useful options is\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/types/ResourceFilter\"\n    target=\"_blank\"\n    ><code>resourceFilter</code></a\n  >, which lets you include or exclude resources based on their resource key.\n  For instance, you can choose to extract string tables only, and ignore all\n  other file types.\n</p>\n<p class=\"footnote\">\n  You can read through the other options if you'd like, but don't worry about it\n  if you don't want to. Chances are, you're never going to need the other\n  options.\n</p>\n\n<h4>Final Notes</h4>\n<p>\n  Obviously, the main purpose of extraction is to extract tuning from the game.\n  For that, you can use\n  <a href=\"https://sims4toolkit.com/#/docs/extraction\" target=\"_blank\"\n    >@s4tk/extraction</a\n  >.\n</p>\n<p>\n  It is impossible to demo game file extraction in the browser for two reasons:\n</p>\n<ul>\n  <li>The browser does not have access to your local file system</li>\n  <li>\n    @s4tk/extraction is not just JavaScript, it uses some C bindings to optimize\n    the extraction process\n  </li>\n</ul>\n<p>\n  If you want to use S4TK for extracting files from your game, check out the\n  <a href=\"https://github.com/sims4toolkit/extraction-template\" target=\"_blank\"\n    >extraction template project</a\n  >\n  on GitHub.\n</p>\n"}],"media":{"English.stbl":"U1RCTAUAAAEAAAAAAAAAAAAOAAAAdNCnJwANAEhlbGxvLCB3b3JsZCE=","Italian.stbl":"U1RCTAUAAAEAAAAAAAAAAAAOAAAAdNCnJwANAENpYW8gYSBtb25kbyE=","Sample.package":"REJQRgIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAABEAAAAAAAAAAAAAAAAAAAAAwAAACMBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeJwLDnHyYWVgYGSAAT4gLrmwXJ2Bl8EjNScnX0ehPL8oJ0URAHn+B/J4nLOxr8jNUShLLSrOzM+zVTLUM1BSSM1Lzk/JzEu3VSotSdO1ULK347LxVEi2VQopSswsUVLItFUqgbByoaxiPQilpAA0ozg/NzUeqqAYaKSRsYmpkh2XgoKND0g6MT21GMwFCrjaRfqH+rk7uoT6hNjou8JFkQVs9H3AlCtIM9jY+JLKglQlOw9PFxdXP7AqG31POwDDBzjHAAAAANpXBSIAAACAiXEHAHFTVQBgAAAAKQAAgCkAAABCWgEAx91fywAAAAChMnQZcNputIkAAACaAACAygAAAEJaAQA="}}