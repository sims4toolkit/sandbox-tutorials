{"key":"packages","pages":[{"script":"const { fnv64 } = require(\"@s4tk/hashing\");\nconst { Package, StringTableResource, XmlResource } = require(\"@s4tk/models\");\nconst {\n  BinaryResourceType,\n  StringTableResource,\n  TuningResourceType,\n} = require(\"@s4tk/models/enums\");\n\n// ==================================================\n// Adding Entries\n\n// TODO:\n\n// ==================================================\n// Getting Entries\n\n// TODO:\n\n// ==================================================\n// Editing Entries\n\n// TODO:\n\n// ==================================================\n// Deleting Entries\n\n// TODO:\n","guide":"<h2>Package</h2>\n<p>\n  When dealing with packages, you'll need to use the <code>Package</code> class\n  from @s4tk/models.\n</p>\n<p class=\"footnote\">\n  This tutorial assumes that you are somewhat familiar with\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/abstracts/MappedModel\"\n    target=\"_blank\"\n    >MappedModels</a\n  >. If you are not, you should read the\n  <a href=\"#/tutorials/intro-to-s4tk\">Intro to S4TK tutorial</a>\n  before this one.\n</p>\n\n<h4>Creating Package</h4>\n<p>To create a new, empty package, you can use <code>new Package()</code>.</p>\n<p>\n  If you want to create a package with existing entries, you can pass a list of\n  key/resource pairs as the first argument to the constructor. Check the docs if\n  you want more information.\n</p>\n<p class=\"footnote\">\n  Tip: Never use the name \"package\" for a variable, as <code>package</code> is a\n  reserved word in JavaScript - I usually stick with \"pkg\".\n</p>\n\n<h4>Adding Entries</h4>\n<p>TODO</p>\n\n<h4>Getting Entries</h4>\n<p>TODO</p>\n\n<h4>Editing Entries</h4>\n<p>TODO</p>\n\n<h4>Deleting Entries</h4>\n<p>TODO</p>\n"},{"script":"const { Package } = require(\"@s4tk/models\");\n\n// ==================================================\n// Reading a Package Binary\n\n// first, you need to get a buffer containing DBPF data in the sandbox, use\n// `Sandbox.import(filename)`\nconst buffer = await Sandbox.import(\"Sample.package\");\n\n// then, you can use the static `Package.from()` method to create a Package\nconst pkg = Package.from(buffer);\n\n// just to confirm that the pkg is loaded, check its size\nSandbox.output(`Loaded size: ${pkg.size}`);\n\n// ==================================================\n// Writing a Package Binary\n\n// to get the buffer for a package, use `getBuffer()`\nconst outputBuffer = pkg.getBuffer();\n\n// once you have the buffer, you can use `Sandbox.download()`\nSandbox.download(\"Sample.package\", outputBuffer);\n\n// remember, in Node, you must use the `fs` module to read and write files\n","guide":"<h2>Package Binaries</h2>\n<p>\n  To load an existing package into a <code>Package</code>, or to save one as a\n  file, you need to work with binary DBPF buffers.\n</p>\n<p class=\"footnote\">\n  \"DBPF\" stands for \"Database Packed File\", and it is the name of the binary\n  format that package files use. You don't really need to know this, but I'm\n  telling you anyways &#10024;.\n</p>\n\n<h4>Reading a DBPF Buffer</h4>\n<p>TODO</p>\n\n<h4>Writing a DBPF Buffer</h4>\n<p>TODO</p>\n\n<h4>Note about Node</h4>\n<p>\n  When using S4TK in Node, remember that <code>import()</code> and\n  <code>download()</code> are not available. You'll have to use the\n  <code>fs</code> Node module to read & write files.\n</p>\n"},{"script":"","guide":"<h2>Extracting from Packages</h2>\n<p>\n  If all you need are the resources, rather than the package itself, then you\n  can extract them and forego the <code>Package</code> object.\n</p>\n\n<h4>Extracting Resources</h4>\n<p>\n  The static <code>extractResources(buffer)</code> method accepts a DBPF buffer\n  as an argument, parses it, and returns a list of\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/types/ResourceKeyPair\"\n    target=\"_blank\"\n    ><code>ResourceKeyPair</code></a\n  >\n  objects, which have <code>key</code> and <code>value</code> properties.\n</p>\n<p>\n  These key/value pairs are just like entries, except they do not belong to any\n  mapped model.\n</p>\n\n<h4>Optional Arguments</h4>\n<p>\n  The <code>extractResources(buffer, options?)</code> method accepts a second\n  argument, which is an object of\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/types/PackageFileReadingOptions\"\n    target=\"_blank\"\n    ><code>PackageFileReadingOptions</code></a\n  >.\n</p>\n<p>\n  One of the most useful options is\n  <a\n    href=\"https://sims4toolkit.com/#/docs/models/latest/types/ResourceFilter\"\n    target=\"_blank\"\n    ><code>resourceFilter</code></a\n  >, which lets you include or exclude resources based on their resource key.\n  For instance, you can choose to extract string tables only, and ignore all\n  other file types.\n</p>\n<p class=\"footnote\">\n  You can read through the other options if you'd like, but don't worry about it\n  if you don't want to. Chances are, you're never going to need the other\n  options.\n</p>\n\n<h4>Final Notes</h4>\n<p>\n  Obviously, the main purpose of extraction is to extract tuning from the game.\n  For that, you can use\n  <a href=\"https://sims4toolkit.com/#/docs/extraction\" target=\"_blank\"\n    >@s4tk/extraction</a\n  >.\n</p>\n<p>\n  It is impossible to demo game file extraction in the browser for two reasons:\n</p>\n<ul>\n  <li>The browser does not have access to your local file system</li>\n  <li>\n    @s4tk/extraction is not just JavaScript, it uses some C bindings to optimize\n    the extraction process\n  </li>\n</ul>\n<p>\n  If you want to use S4TK for extracting files from your game, check out the\n  <a href=\"https://github.com/sims4toolkit/extraction-template\" target=\"_blank\"\n    >extraction template project</a\n  >\n  on GitHub.\n</p>\n"}],"media":{}}