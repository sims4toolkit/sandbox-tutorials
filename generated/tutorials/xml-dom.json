{"key":"xml-dom","pages":[{"script":"const { XmlDocumentNode } = require(\"@s4tk/xml-dom\");\n\n// You can load an XML DOM from a string or Buffer with XmlDocumentNode.from()\nconst doc = XmlDocumentNode.from(`\n<I c=\"Class\" i=\"type\" m=\"path\" n=\"some_tuning\" s=\"12345\">\n  <L n=\"list_of_tuples\">\n    <U>\n      <T n=\"tunable\">67890<!--something--></T>\n      <E n=\"enum_value\">VALUE_1</E>\n    </U>\n    <U>\n      <T n=\"tunable\">24680<!--something_else--></T>\n      <E n=\"enum_value\">VALUE_2</E>\n    </U>\n  </L>\n</I>\n`);\n\n// Remember, the document node itself is invisible; it is just a wrapper for\n// the \"real\" nodes. What you really want is the root, which in this case, is\n// the <I> tag. You can get the root of a document with the `child` property.\nconst root = doc.child;\n\n// We'll discuss element nodes and their properties next, but for now, just know\n// that you can get an element node's tag with the `tag` property.\nconst rootTag = root.tag;\n\n// Let's make sure the root's tag is \"I\", to verify that the document loaded\nSandbox.test('Root tag should be \"I\"', rootTag === \"I\");\n","guide":"<h2>XML Documents</h2>\n<p>\n  XML is a data format that means nothing on its own. In order for it to have\n  meaning, it must be loaded into a Document Object Model (DOM). The S4TK module\n  that handles XML DOMs is called @s4tk/xml-dom.\n</p>\n\n<h4>Nodes</h4>\n<p>\n  At the core of XML DOMs are <strong>nodes</strong>. \"Node\" is a vague term for\n  pretty much anything in an XML DOM, such as an element/tag (like\n  <code>&lt;T /&gt;</code>), a value (like <code>0x00000000</code>), or a\n  comment (like <code>&lt;!--...--&gt;</code>).\n</p>\n<p>\n  Some nodes, like elements, are able to contain other nodes. These are called\n  <strong>parents</strong>, and the nodes they contain are their\n  <strong>children</strong>. For example, an <code>&lt;L /&gt;</code> node that\n  contains several <code>&lt;T /&gt;</code> nodes is a parent, and the\n  <code>&lt;T /&gt;</code> nodes are its children.\n</p>\n<p>\n  Everything in an XML DOM is a node, including the document itself. The\n  document node is just a wrapper for the node(s) at the highest level, i.e. the\n  node(s) from which all other nodes descend. In properly structured XML, there\n  should only be one* node without a parent, such as <code>&lt;I /&gt;</code>.\n  This child is called the <strong>root</strong>.\n</p>\n<p class=\"footnote\">\n  * The line that begins with \"&lt;?xml\" is called a processing instruction, and\n  can be ignored for the sake of this lesson.\n</p>\n\n<h4>Parsing XML Documents</h4>\n<p>\n  If the last section was too abstract for you to digest, take a look at the\n  script editor for a real example. In the XML document created for the\n  <code>doc</code> variable, <code>&lt;I&gt;</code> is the root node. It is a\n  parent with one child, <code>&lt;L&gt;</code>. <code>&lt;L&gt;</code> is also\n  a parent to the two <code>&lt;U&gt;</code> nodes, and each\n  <code>&lt;U&gt;</code> is a parent to a <code>&lt;T&gt;</code> and an\n  <code>&lt;E&gt;</code>. Even those <code>&lt;T&gt;</code> and\n  <code>&lt;E&gt;</code> nodes are parents - their children are the value and\n  comment nodes they contain, but we'll get back to that later.\n</p>\n<p>\n  You'll notice that the XML string is being parsed into a DOM with\n  <code>XmlDocumentNode.from(xml: string | Buffer)</code>. This static method\n  returns an instance of the <code>XmlDocumentNode</code> class, which\n  represents an XML document for the given string/buffer.\n</p>\n\n<h4>The Root Node</h4>\n<p>\n  As mentioned before, the root of this document is <code>&lt;I&gt;</code>, as\n  it is the node from which everything else descends. To access it, you can use\n  the <code>doc</code>'s <code>child</code> property (the\n  <code>children</code> property is a list of all of a node's children, and\n  <code>child</code> is just an alias for <code>children[0]</code>).\n</p>\n<p>\n  In the vast majority of XML documents, and 100% of TS4 XML documents, the root\n  node is going to be an element. Elements are nodes that have a tag,\n  attributes, and children. You'll read more about these on the next page.\n</p>\n"},{"script":"// TODO\n","guide":"<h2>Attributes</h2>\n<p>\n  As mentioned on the last page, attributes are key/value pairs. In tuning, they\n  appear on the root node, its children, children of tuples, and variants.\n</p>\n\n<h4>Attribute Aliases</h4>\n<p>\n  On the previous page, you read that you can access attributes with the\n  <code>attributes</code> property. However, for some common attributes\n  (<code>n</code>, <code>s</code>, and <code>t</code>), there are aliases\n  available.\n</p>\n<p>\n  To get the <code>n</code> attribute of a node, you can use <code>name</code>.\n  For <code>s</code>, you can use <code>id</code>. And finally, for\n  <code>t</code>, you can use <code>type</code>.\n</p>\n<p>\n  For any other attributes (like <code>c</code>, <code>m</code>, <code>i</code>,\n  and <code>p</code>), you <strong>must</strong> use the\n  <code>attributes</code> property and get them by name. These attributes do not\n  have aliases for two reasons:\n</p>\n<ol>\n  <li>You're unlikely to need them.</li>\n  <li>There are no good options*.</li>\n</ol>\n<p class=\"footnote\">\n  *<code>class</code>/<code>module</code> are reserved words and cannot be used\n  for <code>c</code>/<code>m</code>; <code>instanceType</code> is too long and\n  <code>type</code> is taken by <code>t</code>, neither is good option for\n  <code>i</code>; who the hell cares about <code>p</code>?\n</p>\n\n<h4>Editing Attributes</h4>\n<p>\n  To add a new attribute or change the value of an existing one, all you have to\n  do is set it, like <code>node.attributes.n = \"something\"</code>. To delete an\n  existing attribute, you need to use <code>delete node.attributes.n</code>.\n</p>\n<p>\n  Valid values for attributes include strings, numbers, and bigints. Note that\n  parsing an XML document will <strong>always</strong> return them as strings,\n  because parsing them as numbers would cause precision errors with 64-bit\n  tuning IDs. If you need the instance to be a bigint, you must cast it with\n  <code>BigInt()</code>.\n</p>\n<p>\n  It's important to note that you are <strong>not</strong> allowed to set the\n  <code>attributes</code> property itself to a new object. You\n  <strong>must</strong> mutate the existing one*.\n</p>\n<p class=\"footnote\">\n  * This is a remnant from how S4TK used to handle buffer cacheing, and may be\n  changed in the future. But, for now, attempting to set\n  <code>attributes</code> to a new object will throw an error, so don't do it.\n</p>\n"}],"media":{}}