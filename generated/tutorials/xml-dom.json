{"key":"xml-dom","pages":[{"script":"const { XmlDocumentNode } = require(\"@s4tk/xml-dom\");\n\n// You can load an XML DOM from a string or Buffer with XmlDocumentNode.from()\nconst doc = XmlDocumentNode.from(`\n<I c=\"Class\" i=\"type\" m=\"path\" n=\"some_tuning\" s=\"12345\">\n  <L n=\"list_of_tuples\">\n    <U>\n      <T n=\"tunable\">67890<!--something--></T>\n      <E n=\"enum_value\">VALUE_1</E>\n    </U>\n    <U>\n      <T n=\"tunable\">24680<!--something_else--></T>\n      <E n=\"enum_value\">VALUE_2</E>\n    </U>\n  </L>\n</I>\n`);\n\n// Remember, the document node itself is invisible; it is just a wrapper for\n// the \"real\" nodes. What you really want is the root, which in this case, is\n// the <I> tag. You can get the root of a document with the `child` property.\nconst root = doc.child;\n\n// You can access attributes with the `attributes` property\nconst filename = root.attributes.n;\n\n// Let's make sure the filename is what we expect, \"some_tuning\"\nSandbox.test('Filename should be \"some_tuning\"', filename === \"some_tuning\");\n","guide":"<h2>About XML DOMs</h2>\n<p>\n  As a TS4 modder, you're likely familiar with XML structure. However, in order\n  to work with XML in a script, you must also understand XML DOMs.\n</p>\n<p>\n  XML is a data format that means nothing on its own. In order for it to have\n  meaning, it must be loaded into a Document Object Model (DOM). The S4TK module\n  that handles XML DOMs is called @s4tk/xml-dom.\n</p>\n\n<h4>Nodes</h4>\n<p>\n  At the core of XML DOMs are <strong>nodes</strong>. \"Node\" is a vague term for\n  pretty much anything in an XML DOM, such as a tag (like &lt;T /&gt;), a value\n  (like 0x00000000), or a comment (like &lt;!--...--&gt;).\n</p>\n<p>\n  Some nodes, like tags, are able to contain other nodes. These are called\n  <strong>parents</strong>, and the nodes they contain are their\n  <strong>children</strong>. For example, an &lt;L /&gt; tag that contains\n  several &lt;T /&gt; tags is a parent, and the &lt;T /&gt; tags are its\n  children.\n</p>\n<p>\n  Everything in an XML DOM is a node, including the document itself. The\n  document node is just a wrapper for the nodes that do not have a visible\n  parent. In properly structured XML, there should only be one* node without a\n  parent, such as the &lt;I /&gt; in instance tuning or &lt;M /&gt; in module\n  tuning. This one child is called the <strong>root</strong>.\n</p>\n<p style=\"font-size: 0.8rem\">\n  <em class=\"text-subtle\"\n    >* You may see one more node - the line that begins with \"&lt;?xml\". This is\n    called a processing instruction, and can be ignored for the sake of this\n    lesson.</em\n  >\n</p>\n\n<h4>XML Documents</h4>\n<p>\n  If the last section was too abstract for you to digest, take a look at the\n  script editor for a real example. In the XML document created for the\n  <code>doc</code> variable, <code>&lt;I&gt;</code> is the root node. It is a\n  parent with one child, <code>&lt;L&gt;</code>. <code>&lt;L&gt;</code> is also\n  a parent to the two <code>&lt;U&gt;</code> nodes, and each\n  <code>&lt;U&gt;</code> is a parent to a <code>&lt;T&gt;</code> and an\n  <code>&lt;E&gt;</code>. Even those <code>&lt;T&gt;</code> and\n  <code>&lt;E&gt;</code> nodes are parents - their children are the value and\n  comment nodes they contain, but we'll get back to that later.\n</p>\n<p>\n  You'll notice that the XML string is being parsed into a DOM with\n  <code>XmlDocumentNode.from(xml: string | Buffer)</code>. This static method\n  returns an instance of the <code>XmlDocumentNode</code> class, which\n  represents an XML document.\n</p>\n<p>\n  As mentioned before, the root of this document is <code>&lt;I&gt;</code>, as\n  it is the node from which everything else descends. To access it, you can use\n  the <code>doc</code>'s <code>child</code> property (the\n  <code>children</code> property is a list of all of a node's children, and\n  <code>child</code> is just an alias for <code>children[0]</code>).\n</p>\n\n<h4>Attributes</h4>\n<p>\n  Attributes are the key/value pairs that appear within opening tags, such as\n  the <code>n=\"tunable\"</code> in <code>&lt;T n=\"tunable\"&gt;</code>.\n</p>\n<p>\n  We'll touch more on attributes on the next page, but for now, just know that\n  you can access a tag's attributes with its <code>attributes</code> property.\n  Once you have that, you can just use the attribute's key to get its value,\n  like <code>attributes.n</code> or <code>attributes[\"n\"]</code> (these do the\n  same thing).\n</p>\n"}],"media":{}}